// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InfiltratorLevel.proto

#ifndef PROTOBUF_InfiltratorLevel_2eproto__INCLUDED
#define PROTOBUF_InfiltratorLevel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Infiltrator {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_InfiltratorLevel_2eproto();
void protobuf_AssignDesc_InfiltratorLevel_2eproto();
void protobuf_ShutdownFile_InfiltratorLevel_2eproto();

class Level;
class Level_Vector2D;
class Level_WorldObj;
class Level_Guard;
class Level_NavMapNode;

enum Level_WorldObjType {
  Level_WorldObjType_ROCKWALL = 1,
  Level_WorldObjType_ROCK01 = 2,
  Level_WorldObjType_ROCK02 = 3,
  Level_WorldObjType_BUSH = 4,
  Level_WorldObjType_PINE = 5,
  Level_WorldObjType_ROOF = 6,
  Level_WorldObjType_ROAD = 7,
  Level_WorldObjType_PLAYER = 8,
  Level_WorldObjType_PRINCESS = 10,
  Level_WorldObjType_COIN = 12,
  Level_WorldObjType_CHEST = 13,
  Level_WorldObjType_GOAL = 14
};
bool Level_WorldObjType_IsValid(int value);
const Level_WorldObjType Level_WorldObjType_WorldObjType_MIN = Level_WorldObjType_ROCKWALL;
const Level_WorldObjType Level_WorldObjType_WorldObjType_MAX = Level_WorldObjType_GOAL;
const int Level_WorldObjType_WorldObjType_ARRAYSIZE = Level_WorldObjType_WorldObjType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Level_WorldObjType_descriptor();
inline const ::std::string& Level_WorldObjType_Name(Level_WorldObjType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Level_WorldObjType_descriptor(), value);
}
inline bool Level_WorldObjType_Parse(
    const ::std::string& name, Level_WorldObjType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Level_WorldObjType>(
    Level_WorldObjType_descriptor(), name, value);
}
// ===================================================================

class Level_Vector2D : public ::google::protobuf::Message {
 public:
  Level_Vector2D();
  virtual ~Level_Vector2D();
  
  Level_Vector2D(const Level_Vector2D& from);
  
  inline Level_Vector2D& operator=(const Level_Vector2D& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Level_Vector2D& default_instance();
  
  void Swap(Level_Vector2D* other);
  
  // implements Message ----------------------------------------------
  
  Level_Vector2D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Level_Vector2D& from);
  void MergeFrom(const Level_Vector2D& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // @@protoc_insertion_point(class_scope:Infiltrator.Level.Vector2D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_InfiltratorLevel_2eproto();
  friend void protobuf_AssignDesc_InfiltratorLevel_2eproto();
  friend void protobuf_ShutdownFile_InfiltratorLevel_2eproto();
  
  void InitAsDefaultInstance();
  static Level_Vector2D* default_instance_;
};
// -------------------------------------------------------------------

class Level_WorldObj : public ::google::protobuf::Message {
 public:
  Level_WorldObj();
  virtual ~Level_WorldObj();
  
  Level_WorldObj(const Level_WorldObj& from);
  
  inline Level_WorldObj& operator=(const Level_WorldObj& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Level_WorldObj& default_instance();
  
  void Swap(Level_WorldObj* other);
  
  // implements Message ----------------------------------------------
  
  Level_WorldObj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Level_WorldObj& from);
  void MergeFrom(const Level_WorldObj& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Infiltrator.Level.WorldObjType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Infiltrator::Level_WorldObjType type() const;
  inline void set_type(::Infiltrator::Level_WorldObjType value);
  
  // required .Infiltrator.Level.Vector2D pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::Infiltrator::Level_Vector2D& pos() const;
  inline ::Infiltrator::Level_Vector2D* mutable_pos();
  inline ::Infiltrator::Level_Vector2D* release_pos();
  
  // @@protoc_insertion_point(class_scope:Infiltrator.Level.WorldObj)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Infiltrator::Level_Vector2D* pos_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_InfiltratorLevel_2eproto();
  friend void protobuf_AssignDesc_InfiltratorLevel_2eproto();
  friend void protobuf_ShutdownFile_InfiltratorLevel_2eproto();
  
  void InitAsDefaultInstance();
  static Level_WorldObj* default_instance_;
};
// -------------------------------------------------------------------

class Level_Guard : public ::google::protobuf::Message {
 public:
  Level_Guard();
  virtual ~Level_Guard();
  
  Level_Guard(const Level_Guard& from);
  
  inline Level_Guard& operator=(const Level_Guard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Level_Guard& default_instance();
  
  void Swap(Level_Guard* other);
  
  // implements Message ----------------------------------------------
  
  Level_Guard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Level_Guard& from);
  void MergeFrom(const Level_Guard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Infiltrator.Level.Vector2D pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline const ::Infiltrator::Level_Vector2D& pos() const;
  inline ::Infiltrator::Level_Vector2D* mutable_pos();
  inline ::Infiltrator::Level_Vector2D* release_pos();
  
  // repeated .Infiltrator.Level.Vector2D waypoints = 2;
  inline int waypoints_size() const;
  inline void clear_waypoints();
  static const int kWaypointsFieldNumber = 2;
  inline const ::Infiltrator::Level_Vector2D& waypoints(int index) const;
  inline ::Infiltrator::Level_Vector2D* mutable_waypoints(int index);
  inline ::Infiltrator::Level_Vector2D* add_waypoints();
  inline const ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Vector2D >&
      waypoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Vector2D >*
      mutable_waypoints();
  
  // @@protoc_insertion_point(class_scope:Infiltrator.Level.Guard)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Infiltrator::Level_Vector2D* pos_;
  ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Vector2D > waypoints_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_InfiltratorLevel_2eproto();
  friend void protobuf_AssignDesc_InfiltratorLevel_2eproto();
  friend void protobuf_ShutdownFile_InfiltratorLevel_2eproto();
  
  void InitAsDefaultInstance();
  static Level_Guard* default_instance_;
};
// -------------------------------------------------------------------

class Level_NavMapNode : public ::google::protobuf::Message {
 public:
  Level_NavMapNode();
  virtual ~Level_NavMapNode();
  
  Level_NavMapNode(const Level_NavMapNode& from);
  
  inline Level_NavMapNode& operator=(const Level_NavMapNode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Level_NavMapNode& default_instance();
  
  void Swap(Level_NavMapNode* other);
  
  // implements Message ----------------------------------------------
  
  Level_NavMapNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Level_NavMapNode& from);
  void MergeFrom(const Level_NavMapNode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Infiltrator.Level.Vector2D position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::Infiltrator::Level_Vector2D& position() const;
  inline ::Infiltrator::Level_Vector2D* mutable_position();
  inline ::Infiltrator::Level_Vector2D* release_position();
  
  // repeated .Infiltrator.Level.Vector2D adjacentPositions = 2;
  inline int adjacentpositions_size() const;
  inline void clear_adjacentpositions();
  static const int kAdjacentPositionsFieldNumber = 2;
  inline const ::Infiltrator::Level_Vector2D& adjacentpositions(int index) const;
  inline ::Infiltrator::Level_Vector2D* mutable_adjacentpositions(int index);
  inline ::Infiltrator::Level_Vector2D* add_adjacentpositions();
  inline const ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Vector2D >&
      adjacentpositions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Vector2D >*
      mutable_adjacentpositions();
  
  // @@protoc_insertion_point(class_scope:Infiltrator.Level.NavMapNode)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Infiltrator::Level_Vector2D* position_;
  ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Vector2D > adjacentpositions_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_InfiltratorLevel_2eproto();
  friend void protobuf_AssignDesc_InfiltratorLevel_2eproto();
  friend void protobuf_ShutdownFile_InfiltratorLevel_2eproto();
  
  void InitAsDefaultInstance();
  static Level_NavMapNode* default_instance_;
};
// -------------------------------------------------------------------

class Level : public ::google::protobuf::Message {
 public:
  Level();
  virtual ~Level();
  
  Level(const Level& from);
  
  inline Level& operator=(const Level& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Level& default_instance();
  
  void Swap(Level* other);
  
  // implements Message ----------------------------------------------
  
  Level* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Level& from);
  void MergeFrom(const Level& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Level_Vector2D Vector2D;
  typedef Level_WorldObj WorldObj;
  typedef Level_Guard Guard;
  typedef Level_NavMapNode NavMapNode;
  
  typedef Level_WorldObjType WorldObjType;
  static const WorldObjType ROCKWALL = Level_WorldObjType_ROCKWALL;
  static const WorldObjType ROCK01 = Level_WorldObjType_ROCK01;
  static const WorldObjType ROCK02 = Level_WorldObjType_ROCK02;
  static const WorldObjType BUSH = Level_WorldObjType_BUSH;
  static const WorldObjType PINE = Level_WorldObjType_PINE;
  static const WorldObjType ROOF = Level_WorldObjType_ROOF;
  static const WorldObjType ROAD = Level_WorldObjType_ROAD;
  static const WorldObjType PLAYER = Level_WorldObjType_PLAYER;
  static const WorldObjType PRINCESS = Level_WorldObjType_PRINCESS;
  static const WorldObjType COIN = Level_WorldObjType_COIN;
  static const WorldObjType CHEST = Level_WorldObjType_CHEST;
  static const WorldObjType GOAL = Level_WorldObjType_GOAL;
  static inline bool WorldObjType_IsValid(int value) {
    return Level_WorldObjType_IsValid(value);
  }
  static const WorldObjType WorldObjType_MIN =
    Level_WorldObjType_WorldObjType_MIN;
  static const WorldObjType WorldObjType_MAX =
    Level_WorldObjType_WorldObjType_MAX;
  static const int WorldObjType_ARRAYSIZE =
    Level_WorldObjType_WorldObjType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WorldObjType_descriptor() {
    return Level_WorldObjType_descriptor();
  }
  static inline const ::std::string& WorldObjType_Name(WorldObjType value) {
    return Level_WorldObjType_Name(value);
  }
  static inline bool WorldObjType_Parse(const ::std::string& name,
      WorldObjType* value) {
    return Level_WorldObjType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string levelName = 1;
  inline bool has_levelname() const;
  inline void clear_levelname();
  static const int kLevelNameFieldNumber = 1;
  inline const ::std::string& levelname() const;
  inline void set_levelname(const ::std::string& value);
  inline void set_levelname(const char* value);
  inline void set_levelname(const char* value, size_t size);
  inline ::std::string* mutable_levelname();
  inline ::std::string* release_levelname();
  
  // required .Infiltrator.Level.Vector2D levelSize = 2;
  inline bool has_levelsize() const;
  inline void clear_levelsize();
  static const int kLevelSizeFieldNumber = 2;
  inline const ::Infiltrator::Level_Vector2D& levelsize() const;
  inline ::Infiltrator::Level_Vector2D* mutable_levelsize();
  inline ::Infiltrator::Level_Vector2D* release_levelsize();
  
  // optional .Infiltrator.Level.WorldObj mission1st = 3;
  inline bool has_mission1st() const;
  inline void clear_mission1st();
  static const int kMission1StFieldNumber = 3;
  inline const ::Infiltrator::Level_WorldObj& mission1st() const;
  inline ::Infiltrator::Level_WorldObj* mutable_mission1st();
  inline ::Infiltrator::Level_WorldObj* release_mission1st();
  
  // optional .Infiltrator.Level.WorldObj mission2nd = 4;
  inline bool has_mission2nd() const;
  inline void clear_mission2nd();
  static const int kMission2NdFieldNumber = 4;
  inline const ::Infiltrator::Level_WorldObj& mission2nd() const;
  inline ::Infiltrator::Level_WorldObj* mutable_mission2nd();
  inline ::Infiltrator::Level_WorldObj* release_mission2nd();
  
  // repeated .Infiltrator.Level.Guard guards = 5;
  inline int guards_size() const;
  inline void clear_guards();
  static const int kGuardsFieldNumber = 5;
  inline const ::Infiltrator::Level_Guard& guards(int index) const;
  inline ::Infiltrator::Level_Guard* mutable_guards(int index);
  inline ::Infiltrator::Level_Guard* add_guards();
  inline const ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Guard >&
      guards() const;
  inline ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Guard >*
      mutable_guards();
  
  // repeated .Infiltrator.Level.WorldObj stuff = 6;
  inline int stuff_size() const;
  inline void clear_stuff();
  static const int kStuffFieldNumber = 6;
  inline const ::Infiltrator::Level_WorldObj& stuff(int index) const;
  inline ::Infiltrator::Level_WorldObj* mutable_stuff(int index);
  inline ::Infiltrator::Level_WorldObj* add_stuff();
  inline const ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_WorldObj >&
      stuff() const;
  inline ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_WorldObj >*
      mutable_stuff();
  
  // repeated .Infiltrator.Level.NavMapNode navMapNodes = 8;
  inline int navmapnodes_size() const;
  inline void clear_navmapnodes();
  static const int kNavMapNodesFieldNumber = 8;
  inline const ::Infiltrator::Level_NavMapNode& navmapnodes(int index) const;
  inline ::Infiltrator::Level_NavMapNode* mutable_navmapnodes(int index);
  inline ::Infiltrator::Level_NavMapNode* add_navmapnodes();
  inline const ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_NavMapNode >&
      navmapnodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_NavMapNode >*
      mutable_navmapnodes();
  
  // @@protoc_insertion_point(class_scope:Infiltrator.Level)
 private:
  inline void set_has_levelname();
  inline void clear_has_levelname();
  inline void set_has_levelsize();
  inline void clear_has_levelsize();
  inline void set_has_mission1st();
  inline void clear_has_mission1st();
  inline void set_has_mission2nd();
  inline void clear_has_mission2nd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* levelname_;
  ::Infiltrator::Level_Vector2D* levelsize_;
  ::Infiltrator::Level_WorldObj* mission1st_;
  ::Infiltrator::Level_WorldObj* mission2nd_;
  ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Guard > guards_;
  ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_WorldObj > stuff_;
  ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_NavMapNode > navmapnodes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_InfiltratorLevel_2eproto();
  friend void protobuf_AssignDesc_InfiltratorLevel_2eproto();
  friend void protobuf_ShutdownFile_InfiltratorLevel_2eproto();
  
  void InitAsDefaultInstance();
  static Level* default_instance_;
};
// ===================================================================


// ===================================================================

// Level_Vector2D

// required float x = 1;
inline bool Level_Vector2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Level_Vector2D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Level_Vector2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Level_Vector2D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Level_Vector2D::x() const {
  return x_;
}
inline void Level_Vector2D::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Level_Vector2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Level_Vector2D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Level_Vector2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Level_Vector2D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Level_Vector2D::y() const {
  return y_;
}
inline void Level_Vector2D::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Level_WorldObj

// required .Infiltrator.Level.WorldObjType type = 1;
inline bool Level_WorldObj::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Level_WorldObj::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Level_WorldObj::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Level_WorldObj::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Infiltrator::Level_WorldObjType Level_WorldObj::type() const {
  return static_cast< ::Infiltrator::Level_WorldObjType >(type_);
}
inline void Level_WorldObj::set_type(::Infiltrator::Level_WorldObjType value) {
  GOOGLE_DCHECK(::Infiltrator::Level_WorldObjType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .Infiltrator.Level.Vector2D pos = 2;
inline bool Level_WorldObj::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Level_WorldObj::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Level_WorldObj::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Level_WorldObj::clear_pos() {
  if (pos_ != NULL) pos_->::Infiltrator::Level_Vector2D::Clear();
  clear_has_pos();
}
inline const ::Infiltrator::Level_Vector2D& Level_WorldObj::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Infiltrator::Level_Vector2D* Level_WorldObj::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Infiltrator::Level_Vector2D;
  return pos_;
}
inline ::Infiltrator::Level_Vector2D* Level_WorldObj::release_pos() {
  clear_has_pos();
  ::Infiltrator::Level_Vector2D* temp = pos_;
  pos_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Level_Guard

// required .Infiltrator.Level.Vector2D pos = 1;
inline bool Level_Guard::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Level_Guard::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Level_Guard::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Level_Guard::clear_pos() {
  if (pos_ != NULL) pos_->::Infiltrator::Level_Vector2D::Clear();
  clear_has_pos();
}
inline const ::Infiltrator::Level_Vector2D& Level_Guard::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Infiltrator::Level_Vector2D* Level_Guard::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Infiltrator::Level_Vector2D;
  return pos_;
}
inline ::Infiltrator::Level_Vector2D* Level_Guard::release_pos() {
  clear_has_pos();
  ::Infiltrator::Level_Vector2D* temp = pos_;
  pos_ = NULL;
  return temp;
}

// repeated .Infiltrator.Level.Vector2D waypoints = 2;
inline int Level_Guard::waypoints_size() const {
  return waypoints_.size();
}
inline void Level_Guard::clear_waypoints() {
  waypoints_.Clear();
}
inline const ::Infiltrator::Level_Vector2D& Level_Guard::waypoints(int index) const {
  return waypoints_.Get(index);
}
inline ::Infiltrator::Level_Vector2D* Level_Guard::mutable_waypoints(int index) {
  return waypoints_.Mutable(index);
}
inline ::Infiltrator::Level_Vector2D* Level_Guard::add_waypoints() {
  return waypoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Vector2D >&
Level_Guard::waypoints() const {
  return waypoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Vector2D >*
Level_Guard::mutable_waypoints() {
  return &waypoints_;
}

// -------------------------------------------------------------------

// Level_NavMapNode

// required .Infiltrator.Level.Vector2D position = 1;
inline bool Level_NavMapNode::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Level_NavMapNode::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Level_NavMapNode::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Level_NavMapNode::clear_position() {
  if (position_ != NULL) position_->::Infiltrator::Level_Vector2D::Clear();
  clear_has_position();
}
inline const ::Infiltrator::Level_Vector2D& Level_NavMapNode::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::Infiltrator::Level_Vector2D* Level_NavMapNode::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::Infiltrator::Level_Vector2D;
  return position_;
}
inline ::Infiltrator::Level_Vector2D* Level_NavMapNode::release_position() {
  clear_has_position();
  ::Infiltrator::Level_Vector2D* temp = position_;
  position_ = NULL;
  return temp;
}

// repeated .Infiltrator.Level.Vector2D adjacentPositions = 2;
inline int Level_NavMapNode::adjacentpositions_size() const {
  return adjacentpositions_.size();
}
inline void Level_NavMapNode::clear_adjacentpositions() {
  adjacentpositions_.Clear();
}
inline const ::Infiltrator::Level_Vector2D& Level_NavMapNode::adjacentpositions(int index) const {
  return adjacentpositions_.Get(index);
}
inline ::Infiltrator::Level_Vector2D* Level_NavMapNode::mutable_adjacentpositions(int index) {
  return adjacentpositions_.Mutable(index);
}
inline ::Infiltrator::Level_Vector2D* Level_NavMapNode::add_adjacentpositions() {
  return adjacentpositions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Vector2D >&
Level_NavMapNode::adjacentpositions() const {
  return adjacentpositions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Vector2D >*
Level_NavMapNode::mutable_adjacentpositions() {
  return &adjacentpositions_;
}

// -------------------------------------------------------------------

// Level

// required string levelName = 1;
inline bool Level::has_levelname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Level::set_has_levelname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Level::clear_has_levelname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Level::clear_levelname() {
  if (levelname_ != &::google::protobuf::internal::kEmptyString) {
    levelname_->clear();
  }
  clear_has_levelname();
}
inline const ::std::string& Level::levelname() const {
  return *levelname_;
}
inline void Level::set_levelname(const ::std::string& value) {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  levelname_->assign(value);
}
inline void Level::set_levelname(const char* value) {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  levelname_->assign(value);
}
inline void Level::set_levelname(const char* value, size_t size) {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  levelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Level::mutable_levelname() {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  return levelname_;
}
inline ::std::string* Level::release_levelname() {
  clear_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = levelname_;
    levelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .Infiltrator.Level.Vector2D levelSize = 2;
inline bool Level::has_levelsize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Level::set_has_levelsize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Level::clear_has_levelsize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Level::clear_levelsize() {
  if (levelsize_ != NULL) levelsize_->::Infiltrator::Level_Vector2D::Clear();
  clear_has_levelsize();
}
inline const ::Infiltrator::Level_Vector2D& Level::levelsize() const {
  return levelsize_ != NULL ? *levelsize_ : *default_instance_->levelsize_;
}
inline ::Infiltrator::Level_Vector2D* Level::mutable_levelsize() {
  set_has_levelsize();
  if (levelsize_ == NULL) levelsize_ = new ::Infiltrator::Level_Vector2D;
  return levelsize_;
}
inline ::Infiltrator::Level_Vector2D* Level::release_levelsize() {
  clear_has_levelsize();
  ::Infiltrator::Level_Vector2D* temp = levelsize_;
  levelsize_ = NULL;
  return temp;
}

// optional .Infiltrator.Level.WorldObj mission1st = 3;
inline bool Level::has_mission1st() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Level::set_has_mission1st() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Level::clear_has_mission1st() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Level::clear_mission1st() {
  if (mission1st_ != NULL) mission1st_->::Infiltrator::Level_WorldObj::Clear();
  clear_has_mission1st();
}
inline const ::Infiltrator::Level_WorldObj& Level::mission1st() const {
  return mission1st_ != NULL ? *mission1st_ : *default_instance_->mission1st_;
}
inline ::Infiltrator::Level_WorldObj* Level::mutable_mission1st() {
  set_has_mission1st();
  if (mission1st_ == NULL) mission1st_ = new ::Infiltrator::Level_WorldObj;
  return mission1st_;
}
inline ::Infiltrator::Level_WorldObj* Level::release_mission1st() {
  clear_has_mission1st();
  ::Infiltrator::Level_WorldObj* temp = mission1st_;
  mission1st_ = NULL;
  return temp;
}

// optional .Infiltrator.Level.WorldObj mission2nd = 4;
inline bool Level::has_mission2nd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Level::set_has_mission2nd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Level::clear_has_mission2nd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Level::clear_mission2nd() {
  if (mission2nd_ != NULL) mission2nd_->::Infiltrator::Level_WorldObj::Clear();
  clear_has_mission2nd();
}
inline const ::Infiltrator::Level_WorldObj& Level::mission2nd() const {
  return mission2nd_ != NULL ? *mission2nd_ : *default_instance_->mission2nd_;
}
inline ::Infiltrator::Level_WorldObj* Level::mutable_mission2nd() {
  set_has_mission2nd();
  if (mission2nd_ == NULL) mission2nd_ = new ::Infiltrator::Level_WorldObj;
  return mission2nd_;
}
inline ::Infiltrator::Level_WorldObj* Level::release_mission2nd() {
  clear_has_mission2nd();
  ::Infiltrator::Level_WorldObj* temp = mission2nd_;
  mission2nd_ = NULL;
  return temp;
}

// repeated .Infiltrator.Level.Guard guards = 5;
inline int Level::guards_size() const {
  return guards_.size();
}
inline void Level::clear_guards() {
  guards_.Clear();
}
inline const ::Infiltrator::Level_Guard& Level::guards(int index) const {
  return guards_.Get(index);
}
inline ::Infiltrator::Level_Guard* Level::mutable_guards(int index) {
  return guards_.Mutable(index);
}
inline ::Infiltrator::Level_Guard* Level::add_guards() {
  return guards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Guard >&
Level::guards() const {
  return guards_;
}
inline ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_Guard >*
Level::mutable_guards() {
  return &guards_;
}

// repeated .Infiltrator.Level.WorldObj stuff = 6;
inline int Level::stuff_size() const {
  return stuff_.size();
}
inline void Level::clear_stuff() {
  stuff_.Clear();
}
inline const ::Infiltrator::Level_WorldObj& Level::stuff(int index) const {
  return stuff_.Get(index);
}
inline ::Infiltrator::Level_WorldObj* Level::mutable_stuff(int index) {
  return stuff_.Mutable(index);
}
inline ::Infiltrator::Level_WorldObj* Level::add_stuff() {
  return stuff_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_WorldObj >&
Level::stuff() const {
  return stuff_;
}
inline ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_WorldObj >*
Level::mutable_stuff() {
  return &stuff_;
}

// repeated .Infiltrator.Level.NavMapNode navMapNodes = 8;
inline int Level::navmapnodes_size() const {
  return navmapnodes_.size();
}
inline void Level::clear_navmapnodes() {
  navmapnodes_.Clear();
}
inline const ::Infiltrator::Level_NavMapNode& Level::navmapnodes(int index) const {
  return navmapnodes_.Get(index);
}
inline ::Infiltrator::Level_NavMapNode* Level::mutable_navmapnodes(int index) {
  return navmapnodes_.Mutable(index);
}
inline ::Infiltrator::Level_NavMapNode* Level::add_navmapnodes() {
  return navmapnodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_NavMapNode >&
Level::navmapnodes() const {
  return navmapnodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Infiltrator::Level_NavMapNode >*
Level::mutable_navmapnodes() {
  return &navmapnodes_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Infiltrator

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Infiltrator::Level_WorldObjType>() {
  return ::Infiltrator::Level_WorldObjType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_InfiltratorLevel_2eproto__INCLUDED
