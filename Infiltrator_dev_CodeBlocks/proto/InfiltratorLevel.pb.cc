// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "InfiltratorLevel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Infiltrator {

namespace {

const ::google::protobuf::Descriptor* Level_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Level_reflection_ = NULL;
const ::google::protobuf::Descriptor* Level_Vector2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Level_Vector2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Level_WorldObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Level_WorldObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* Level_Guard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Level_Guard_reflection_ = NULL;
const ::google::protobuf::Descriptor* Level_NavMapNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Level_NavMapNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Level_WorldObjType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_InfiltratorLevel_2eproto() {
  protobuf_AddDesc_InfiltratorLevel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "InfiltratorLevel.proto");
  GOOGLE_CHECK(file != NULL);
  Level_descriptor_ = file->message_type(0);
  static const int Level_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, levelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, levelsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, mission1st_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, mission2nd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, guards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, stuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, navmapnodes_),
  };
  Level_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Level_descriptor_,
      Level::default_instance_,
      Level_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Level));
  Level_Vector2D_descriptor_ = Level_descriptor_->nested_type(0);
  static const int Level_Vector2D_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_Vector2D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_Vector2D, y_),
  };
  Level_Vector2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Level_Vector2D_descriptor_,
      Level_Vector2D::default_instance_,
      Level_Vector2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_Vector2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_Vector2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Level_Vector2D));
  Level_WorldObj_descriptor_ = Level_descriptor_->nested_type(1);
  static const int Level_WorldObj_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_WorldObj, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_WorldObj, pos_),
  };
  Level_WorldObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Level_WorldObj_descriptor_,
      Level_WorldObj::default_instance_,
      Level_WorldObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_WorldObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_WorldObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Level_WorldObj));
  Level_Guard_descriptor_ = Level_descriptor_->nested_type(2);
  static const int Level_Guard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_Guard, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_Guard, waypoints_),
  };
  Level_Guard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Level_Guard_descriptor_,
      Level_Guard::default_instance_,
      Level_Guard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_Guard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_Guard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Level_Guard));
  Level_NavMapNode_descriptor_ = Level_descriptor_->nested_type(3);
  static const int Level_NavMapNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_NavMapNode, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_NavMapNode, adjacentpositions_),
  };
  Level_NavMapNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Level_NavMapNode_descriptor_,
      Level_NavMapNode::default_instance_,
      Level_NavMapNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_NavMapNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level_NavMapNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Level_NavMapNode));
  Level_WorldObjType_descriptor_ = Level_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_InfiltratorLevel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Level_descriptor_, &Level::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Level_Vector2D_descriptor_, &Level_Vector2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Level_WorldObj_descriptor_, &Level_WorldObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Level_Guard_descriptor_, &Level_Guard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Level_NavMapNode_descriptor_, &Level_NavMapNode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_InfiltratorLevel_2eproto() {
  delete Level::default_instance_;
  delete Level_reflection_;
  delete Level_Vector2D::default_instance_;
  delete Level_Vector2D_reflection_;
  delete Level_WorldObj::default_instance_;
  delete Level_WorldObj_reflection_;
  delete Level_Guard::default_instance_;
  delete Level_Guard_reflection_;
  delete Level_NavMapNode::default_instance_;
  delete Level_NavMapNode_reflection_;
}

void protobuf_AddDesc_InfiltratorLevel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026InfiltratorLevel.proto\022\013Infiltrator\"\255\006"
    "\n\005Level\022\021\n\tlevelName\030\001 \002(\t\022.\n\tlevelSize\030"
    "\002 \002(\0132\033.Infiltrator.Level.Vector2D\022/\n\nmi"
    "ssion1st\030\003 \001(\0132\033.Infiltrator.Level.World"
    "Obj\022/\n\nmission2nd\030\004 \001(\0132\033.Infiltrator.Le"
    "vel.WorldObj\022(\n\006guards\030\005 \003(\0132\030.Infiltrat"
    "or.Level.Guard\022*\n\005stuff\030\006 \003(\0132\033.Infiltra"
    "tor.Level.WorldObj\0222\n\013navMapNodes\030\010 \003(\0132"
    "\035.Infiltrator.Level.NavMapNode\032 \n\010Vector"
    "2D\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\032c\n\010WorldObj\022-\n\004"
    "type\030\001 \002(\0162\037.Infiltrator.Level.WorldObjT"
    "ype\022(\n\003pos\030\002 \002(\0132\033.Infiltrator.Level.Vec"
    "tor2D\032a\n\005Guard\022(\n\003pos\030\001 \002(\0132\033.Infiltrato"
    "r.Level.Vector2D\022.\n\twaypoints\030\002 \003(\0132\033.In"
    "filtrator.Level.Vector2D\032s\n\nNavMapNode\022-"
    "\n\010position\030\001 \002(\0132\033.Infiltrator.Level.Vec"
    "tor2D\0226\n\021adjacentPositions\030\002 \003(\0132\033.Infil"
    "trator.Level.Vector2D\"\225\001\n\014WorldObjType\022\014"
    "\n\010ROCKWALL\020\001\022\n\n\006ROCK01\020\002\022\n\n\006ROCK02\020\003\022\010\n\004"
    "BUSH\020\004\022\010\n\004PINE\020\005\022\010\n\004ROOF\020\006\022\010\n\004ROAD\020\007\022\n\n\006"
    "PLAYER\020\010\022\014\n\010PRINCESS\020\n\022\010\n\004COIN\020\014\022\t\n\005CHES"
    "T\020\r\022\010\n\004GOAL\020\016", 853);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "InfiltratorLevel.proto", &protobuf_RegisterTypes);
  Level::default_instance_ = new Level();
  Level_Vector2D::default_instance_ = new Level_Vector2D();
  Level_WorldObj::default_instance_ = new Level_WorldObj();
  Level_Guard::default_instance_ = new Level_Guard();
  Level_NavMapNode::default_instance_ = new Level_NavMapNode();
  Level::default_instance_->InitAsDefaultInstance();
  Level_Vector2D::default_instance_->InitAsDefaultInstance();
  Level_WorldObj::default_instance_->InitAsDefaultInstance();
  Level_Guard::default_instance_->InitAsDefaultInstance();
  Level_NavMapNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_InfiltratorLevel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_InfiltratorLevel_2eproto {
  StaticDescriptorInitializer_InfiltratorLevel_2eproto() {
    protobuf_AddDesc_InfiltratorLevel_2eproto();
  }
} static_descriptor_initializer_InfiltratorLevel_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Level_WorldObjType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Level_WorldObjType_descriptor_;
}
bool Level_WorldObjType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Level_WorldObjType Level::ROCKWALL;
const Level_WorldObjType Level::ROCK01;
const Level_WorldObjType Level::ROCK02;
const Level_WorldObjType Level::BUSH;
const Level_WorldObjType Level::PINE;
const Level_WorldObjType Level::ROOF;
const Level_WorldObjType Level::ROAD;
const Level_WorldObjType Level::PLAYER;
const Level_WorldObjType Level::PRINCESS;
const Level_WorldObjType Level::COIN;
const Level_WorldObjType Level::CHEST;
const Level_WorldObjType Level::GOAL;
const Level_WorldObjType Level::WorldObjType_MIN;
const Level_WorldObjType Level::WorldObjType_MAX;
const int Level::WorldObjType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Level_Vector2D::kXFieldNumber;
const int Level_Vector2D::kYFieldNumber;
#endif  // !_MSC_VER

Level_Vector2D::Level_Vector2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Level_Vector2D::InitAsDefaultInstance() {
}

Level_Vector2D::Level_Vector2D(const Level_Vector2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Level_Vector2D::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Level_Vector2D::~Level_Vector2D() {
  SharedDtor();
}

void Level_Vector2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Level_Vector2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Level_Vector2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Level_Vector2D_descriptor_;
}

const Level_Vector2D& Level_Vector2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiltratorLevel_2eproto();  return *default_instance_;
}

Level_Vector2D* Level_Vector2D::default_instance_ = NULL;

Level_Vector2D* Level_Vector2D::New() const {
  return new Level_Vector2D;
}

void Level_Vector2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Level_Vector2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Level_Vector2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Level_Vector2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Level_Vector2D::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Level_Vector2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Level_Vector2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Level_Vector2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Level_Vector2D::MergeFrom(const Level_Vector2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Level_Vector2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Level_Vector2D::CopyFrom(const Level_Vector2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Level_Vector2D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Level_Vector2D::Swap(Level_Vector2D* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Level_Vector2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Level_Vector2D_descriptor_;
  metadata.reflection = Level_Vector2D_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Level_WorldObj::kTypeFieldNumber;
const int Level_WorldObj::kPosFieldNumber;
#endif  // !_MSC_VER

Level_WorldObj::Level_WorldObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Level_WorldObj::InitAsDefaultInstance() {
  pos_ = const_cast< ::Infiltrator::Level_Vector2D*>(&::Infiltrator::Level_Vector2D::default_instance());
}

Level_WorldObj::Level_WorldObj(const Level_WorldObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Level_WorldObj::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Level_WorldObj::~Level_WorldObj() {
  SharedDtor();
}

void Level_WorldObj::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void Level_WorldObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Level_WorldObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Level_WorldObj_descriptor_;
}

const Level_WorldObj& Level_WorldObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiltratorLevel_2eproto();  return *default_instance_;
}

Level_WorldObj* Level_WorldObj::default_instance_ = NULL;

Level_WorldObj* Level_WorldObj::New() const {
  return new Level_WorldObj;
}

void Level_WorldObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Infiltrator::Level_Vector2D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Level_WorldObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Infiltrator.Level.WorldObjType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Infiltrator::Level_WorldObjType_IsValid(value)) {
            set_type(static_cast< ::Infiltrator::Level_WorldObjType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }
      
      // required .Infiltrator.Level.Vector2D pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Level_WorldObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Infiltrator.Level.WorldObjType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required .Infiltrator.Level.Vector2D pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Level_WorldObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Infiltrator.Level.WorldObjType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required .Infiltrator.Level.Vector2D pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Level_WorldObj::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Infiltrator.Level.WorldObjType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required .Infiltrator.Level.Vector2D pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Level_WorldObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Level_WorldObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Level_WorldObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Level_WorldObj::MergeFrom(const Level_WorldObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::Infiltrator::Level_Vector2D::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Level_WorldObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Level_WorldObj::CopyFrom(const Level_WorldObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Level_WorldObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void Level_WorldObj::Swap(Level_WorldObj* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Level_WorldObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Level_WorldObj_descriptor_;
  metadata.reflection = Level_WorldObj_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Level_Guard::kPosFieldNumber;
const int Level_Guard::kWaypointsFieldNumber;
#endif  // !_MSC_VER

Level_Guard::Level_Guard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Level_Guard::InitAsDefaultInstance() {
  pos_ = const_cast< ::Infiltrator::Level_Vector2D*>(&::Infiltrator::Level_Vector2D::default_instance());
}

Level_Guard::Level_Guard(const Level_Guard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Level_Guard::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Level_Guard::~Level_Guard() {
  SharedDtor();
}

void Level_Guard::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void Level_Guard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Level_Guard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Level_Guard_descriptor_;
}

const Level_Guard& Level_Guard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiltratorLevel_2eproto();  return *default_instance_;
}

Level_Guard* Level_Guard::default_instance_ = NULL;

Level_Guard* Level_Guard::New() const {
  return new Level_Guard;
}

void Level_Guard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Infiltrator::Level_Vector2D::Clear();
    }
  }
  waypoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Level_Guard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Infiltrator.Level.Vector2D pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_waypoints;
        break;
      }
      
      // repeated .Infiltrator.Level.Vector2D waypoints = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_waypoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_waypoints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_waypoints;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Level_Guard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Infiltrator.Level.Vector2D pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos(), output);
  }
  
  // repeated .Infiltrator.Level.Vector2D waypoints = 2;
  for (int i = 0; i < this->waypoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->waypoints(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Level_Guard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Infiltrator.Level.Vector2D pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos(), target);
  }
  
  // repeated .Infiltrator.Level.Vector2D waypoints = 2;
  for (int i = 0; i < this->waypoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->waypoints(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Level_Guard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Infiltrator.Level.Vector2D pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
  }
  // repeated .Infiltrator.Level.Vector2D waypoints = 2;
  total_size += 1 * this->waypoints_size();
  for (int i = 0; i < this->waypoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->waypoints(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Level_Guard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Level_Guard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Level_Guard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Level_Guard::MergeFrom(const Level_Guard& from) {
  GOOGLE_CHECK_NE(&from, this);
  waypoints_.MergeFrom(from.waypoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::Infiltrator::Level_Vector2D::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Level_Guard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Level_Guard::CopyFrom(const Level_Guard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Level_Guard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  for (int i = 0; i < waypoints_size(); i++) {
    if (!this->waypoints(i).IsInitialized()) return false;
  }
  return true;
}

void Level_Guard::Swap(Level_Guard* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    waypoints_.Swap(&other->waypoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Level_Guard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Level_Guard_descriptor_;
  metadata.reflection = Level_Guard_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Level_NavMapNode::kPositionFieldNumber;
const int Level_NavMapNode::kAdjacentPositionsFieldNumber;
#endif  // !_MSC_VER

Level_NavMapNode::Level_NavMapNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Level_NavMapNode::InitAsDefaultInstance() {
  position_ = const_cast< ::Infiltrator::Level_Vector2D*>(&::Infiltrator::Level_Vector2D::default_instance());
}

Level_NavMapNode::Level_NavMapNode(const Level_NavMapNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Level_NavMapNode::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Level_NavMapNode::~Level_NavMapNode() {
  SharedDtor();
}

void Level_NavMapNode::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void Level_NavMapNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Level_NavMapNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Level_NavMapNode_descriptor_;
}

const Level_NavMapNode& Level_NavMapNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiltratorLevel_2eproto();  return *default_instance_;
}

Level_NavMapNode* Level_NavMapNode::default_instance_ = NULL;

Level_NavMapNode* Level_NavMapNode::New() const {
  return new Level_NavMapNode;
}

void Level_NavMapNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_position()) {
      if (position_ != NULL) position_->::Infiltrator::Level_Vector2D::Clear();
    }
  }
  adjacentpositions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Level_NavMapNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Infiltrator.Level.Vector2D position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_adjacentPositions;
        break;
      }
      
      // repeated .Infiltrator.Level.Vector2D adjacentPositions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adjacentPositions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adjacentpositions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_adjacentPositions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Level_NavMapNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Infiltrator.Level.Vector2D position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }
  
  // repeated .Infiltrator.Level.Vector2D adjacentPositions = 2;
  for (int i = 0; i < this->adjacentpositions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->adjacentpositions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Level_NavMapNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Infiltrator.Level.Vector2D position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }
  
  // repeated .Infiltrator.Level.Vector2D adjacentPositions = 2;
  for (int i = 0; i < this->adjacentpositions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->adjacentpositions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Level_NavMapNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Infiltrator.Level.Vector2D position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  // repeated .Infiltrator.Level.Vector2D adjacentPositions = 2;
  total_size += 1 * this->adjacentpositions_size();
  for (int i = 0; i < this->adjacentpositions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adjacentpositions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Level_NavMapNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Level_NavMapNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Level_NavMapNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Level_NavMapNode::MergeFrom(const Level_NavMapNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  adjacentpositions_.MergeFrom(from.adjacentpositions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::Infiltrator::Level_Vector2D::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Level_NavMapNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Level_NavMapNode::CopyFrom(const Level_NavMapNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Level_NavMapNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  for (int i = 0; i < adjacentpositions_size(); i++) {
    if (!this->adjacentpositions(i).IsInitialized()) return false;
  }
  return true;
}

void Level_NavMapNode::Swap(Level_NavMapNode* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    adjacentpositions_.Swap(&other->adjacentpositions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Level_NavMapNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Level_NavMapNode_descriptor_;
  metadata.reflection = Level_NavMapNode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Level::kLevelNameFieldNumber;
const int Level::kLevelSizeFieldNumber;
const int Level::kMission1StFieldNumber;
const int Level::kMission2NdFieldNumber;
const int Level::kGuardsFieldNumber;
const int Level::kStuffFieldNumber;
const int Level::kNavMapNodesFieldNumber;
#endif  // !_MSC_VER

Level::Level()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Level::InitAsDefaultInstance() {
  levelsize_ = const_cast< ::Infiltrator::Level_Vector2D*>(&::Infiltrator::Level_Vector2D::default_instance());
  mission1st_ = const_cast< ::Infiltrator::Level_WorldObj*>(&::Infiltrator::Level_WorldObj::default_instance());
  mission2nd_ = const_cast< ::Infiltrator::Level_WorldObj*>(&::Infiltrator::Level_WorldObj::default_instance());
}

Level::Level(const Level& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Level::SharedCtor() {
  _cached_size_ = 0;
  levelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  levelsize_ = NULL;
  mission1st_ = NULL;
  mission2nd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Level::~Level() {
  SharedDtor();
}

void Level::SharedDtor() {
  if (levelname_ != &::google::protobuf::internal::kEmptyString) {
    delete levelname_;
  }
  if (this != default_instance_) {
    delete levelsize_;
    delete mission1st_;
    delete mission2nd_;
  }
}

void Level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Level::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Level_descriptor_;
}

const Level& Level::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiltratorLevel_2eproto();  return *default_instance_;
}

Level* Level::default_instance_ = NULL;

Level* Level::New() const {
  return new Level;
}

void Level::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_levelname()) {
      if (levelname_ != &::google::protobuf::internal::kEmptyString) {
        levelname_->clear();
      }
    }
    if (has_levelsize()) {
      if (levelsize_ != NULL) levelsize_->::Infiltrator::Level_Vector2D::Clear();
    }
    if (has_mission1st()) {
      if (mission1st_ != NULL) mission1st_->::Infiltrator::Level_WorldObj::Clear();
    }
    if (has_mission2nd()) {
      if (mission2nd_ != NULL) mission2nd_->::Infiltrator::Level_WorldObj::Clear();
    }
  }
  guards_.Clear();
  stuff_.Clear();
  navmapnodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string levelName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_levelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->levelname().data(), this->levelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_levelSize;
        break;
      }
      
      // required .Infiltrator.Level.Vector2D levelSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_levelSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_levelsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mission1st;
        break;
      }
      
      // optional .Infiltrator.Level.WorldObj mission1st = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission1st:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission1st()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mission2nd;
        break;
      }
      
      // optional .Infiltrator.Level.WorldObj mission2nd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission2nd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission2nd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_guards;
        break;
      }
      
      // repeated .Infiltrator.Level.Guard guards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_guards;
        if (input->ExpectTag(50)) goto parse_stuff;
        break;
      }
      
      // repeated .Infiltrator.Level.WorldObj stuff = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stuff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stuff;
        if (input->ExpectTag(66)) goto parse_navMapNodes;
        break;
      }
      
      // repeated .Infiltrator.Level.NavMapNode navMapNodes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_navMapNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_navmapnodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_navMapNodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string levelName = 1;
  if (has_levelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->levelname().data(), this->levelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->levelname(), output);
  }
  
  // required .Infiltrator.Level.Vector2D levelSize = 2;
  if (has_levelsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->levelsize(), output);
  }
  
  // optional .Infiltrator.Level.WorldObj mission1st = 3;
  if (has_mission1st()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mission1st(), output);
  }
  
  // optional .Infiltrator.Level.WorldObj mission2nd = 4;
  if (has_mission2nd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mission2nd(), output);
  }
  
  // repeated .Infiltrator.Level.Guard guards = 5;
  for (int i = 0; i < this->guards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->guards(i), output);
  }
  
  // repeated .Infiltrator.Level.WorldObj stuff = 6;
  for (int i = 0; i < this->stuff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stuff(i), output);
  }
  
  // repeated .Infiltrator.Level.NavMapNode navMapNodes = 8;
  for (int i = 0; i < this->navmapnodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->navmapnodes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Level::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string levelName = 1;
  if (has_levelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->levelname().data(), this->levelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->levelname(), target);
  }
  
  // required .Infiltrator.Level.Vector2D levelSize = 2;
  if (has_levelsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->levelsize(), target);
  }
  
  // optional .Infiltrator.Level.WorldObj mission1st = 3;
  if (has_mission1st()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mission1st(), target);
  }
  
  // optional .Infiltrator.Level.WorldObj mission2nd = 4;
  if (has_mission2nd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mission2nd(), target);
  }
  
  // repeated .Infiltrator.Level.Guard guards = 5;
  for (int i = 0; i < this->guards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->guards(i), target);
  }
  
  // repeated .Infiltrator.Level.WorldObj stuff = 6;
  for (int i = 0; i < this->stuff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stuff(i), target);
  }
  
  // repeated .Infiltrator.Level.NavMapNode navMapNodes = 8;
  for (int i = 0; i < this->navmapnodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->navmapnodes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Level::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string levelName = 1;
    if (has_levelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->levelname());
    }
    
    // required .Infiltrator.Level.Vector2D levelSize = 2;
    if (has_levelsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->levelsize());
    }
    
    // optional .Infiltrator.Level.WorldObj mission1st = 3;
    if (has_mission1st()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission1st());
    }
    
    // optional .Infiltrator.Level.WorldObj mission2nd = 4;
    if (has_mission2nd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission2nd());
    }
    
  }
  // repeated .Infiltrator.Level.Guard guards = 5;
  total_size += 1 * this->guards_size();
  for (int i = 0; i < this->guards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guards(i));
  }
  
  // repeated .Infiltrator.Level.WorldObj stuff = 6;
  total_size += 1 * this->stuff_size();
  for (int i = 0; i < this->stuff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stuff(i));
  }
  
  // repeated .Infiltrator.Level.NavMapNode navMapNodes = 8;
  total_size += 1 * this->navmapnodes_size();
  for (int i = 0; i < this->navmapnodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->navmapnodes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Level::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Level* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Level*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Level::MergeFrom(const Level& from) {
  GOOGLE_CHECK_NE(&from, this);
  guards_.MergeFrom(from.guards_);
  stuff_.MergeFrom(from.stuff_);
  navmapnodes_.MergeFrom(from.navmapnodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelname()) {
      set_levelname(from.levelname());
    }
    if (from.has_levelsize()) {
      mutable_levelsize()->::Infiltrator::Level_Vector2D::MergeFrom(from.levelsize());
    }
    if (from.has_mission1st()) {
      mutable_mission1st()->::Infiltrator::Level_WorldObj::MergeFrom(from.mission1st());
    }
    if (from.has_mission2nd()) {
      mutable_mission2nd()->::Infiltrator::Level_WorldObj::MergeFrom(from.mission2nd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Level::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Level::CopyFrom(const Level& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Level::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_levelsize()) {
    if (!this->levelsize().IsInitialized()) return false;
  }
  if (has_mission1st()) {
    if (!this->mission1st().IsInitialized()) return false;
  }
  if (has_mission2nd()) {
    if (!this->mission2nd().IsInitialized()) return false;
  }
  for (int i = 0; i < guards_size(); i++) {
    if (!this->guards(i).IsInitialized()) return false;
  }
  for (int i = 0; i < stuff_size(); i++) {
    if (!this->stuff(i).IsInitialized()) return false;
  }
  for (int i = 0; i < navmapnodes_size(); i++) {
    if (!this->navmapnodes(i).IsInitialized()) return false;
  }
  return true;
}

void Level::Swap(Level* other) {
  if (other != this) {
    std::swap(levelname_, other->levelname_);
    std::swap(levelsize_, other->levelsize_);
    std::swap(mission1st_, other->mission1st_);
    std::swap(mission2nd_, other->mission2nd_);
    guards_.Swap(&other->guards_);
    stuff_.Swap(&other->stuff_);
    navmapnodes_.Swap(&other->navmapnodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Level::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Level_descriptor_;
  metadata.reflection = Level_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Infiltrator

// @@protoc_insertion_point(global_scope)
